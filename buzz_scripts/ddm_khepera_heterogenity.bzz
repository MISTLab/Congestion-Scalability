include "includes/vec2.bzz"
include "includes/RVO.bzz"
include "includes/neighbors.bzz"
include "includes/table.bzz"


scaling_light_factor = 50
obstacle_threshold = 0.10
max_speed = 50
ang_range =  7.5 * math.pi / 180
time_threshold = 50
delta_time = 20
weight = 0.9

collisions = 0
BVMSTATE = "idle" 

zone = "nest"

white = 1 
black = -1
nest = 0

number_of_samples = 50  
belief = 0
new_belief = 0.5
conflicts = 0

sample_average = 0.0
neighbors_set = nil
white_neighbors_set = nil
black_neighbors_set = nil
samples = {}
prev_light_vector = {.x = 0, .y =0}
time_steps = 0
new_belief = 0.0
white_neighbors = 0
white_aggregate = 0.0
white_ratio = 0.0
black_neighbors = 0
black_aggregate = 0.0
black_ratio = 0.0
decision_flag = 0

others_belief_white = 0.0
others_belief_black = 0.0

samples = nil 
sample_average = 0.0
zone = "nest"
zone_assigned = "nest"

white_followers = swarm.create(3)
black_followers = swarm.create(2)
nesters_exploration = swarm.create(5)
decision_makers = swarm.create(6)
white_exploration = swarm.create(1)
black_exploration = swarm.create(4)
beacons = swarm.create(7)
opinions = stigmergy.create(8)

opinions.onconflict(function (k,l,r){
    conflicts = conflicts + 1
    
    
    if(r.data <= l.data){
        return l
    }
    else{
        return r
    }


})


function sum_light(rid, data, accum) {
  lvec = math.vec2.newp(data.value, data.angle)
  accum.vector = math.vec2.add(lvec, accum.vector)
  if (data.value!=0) { #counting the number of light sensors that are good 
   accum.number = accum.number +1
  }
  return accum
}

# Filtering Light Function
function filtered_light() {
  var filtered_data = reduce(light, sum_light, {.number = 0 , .vector=math.vec2.new(0.0,0.0)})
  return filtered_data
}

# Obstacle avoidance function
function obs_vec()
{
  var accum = {}
  accum.x = 0.0
  accum.y = 0.0
  var i = 0
  while(i < size(proximity)) {
	accum.x = accum.x + proximity[i].value * math.cos(proximity[i].angle)
	accum.y = accum.y + proximity[i].value * math.sin(proximity[i].angle)
	i = i + 1
  }
  accum.x = accum.x / size(proximity)
  accum.y = accum.y / size(proximity)


  #debug.print("[",id,"]",math.vec2.length(light_vector)," .x ",light_vector.x," .y ",light_vector.y)
  return accum
}

# function to sum the ground sensor values
function sum_ground(rid, data, accum) {
   return accum + data.value
}

# function to calculate the average ground sensor value
function avg_ground() {
    var ground_avg = reduce(ground, sum_ground, 0.0)
    ground_avg = ground_avg / size(ground)
    return ground_avg
}

function display_led(){

    if (zone_assigned == "white"){
        set_leds(255,255,255)
    }

    if (zone_assigned == "black"){
        set_leds(0,0,0)
    }

    if (zone_assigned == "nest"){
        set_leds(0,255,0)
    }
 

    if (beacons.in()){
        if (id < 105) {
        set_leds(255,255,255)
        }
        else {
        set_leds(0,0,0)    
        } 
    }
}


function explore_avoid() {
    var obs_vector = obs_vec()
    var obs_vector_len = math.vec2.length(obs_vec())
    var obs_ang = math.atan(obs_vector.y, obs_vector.x)

    if (obs_ang > -ang_range and obs_ang < ang_range and obs_vector_len < obstacle_threshold){
        goto(max_speed, 0.0)
    }
    
    else{
        collisions = collisions + 1
        obs_vector = math.vec2.scale(obs_vector, -1.0*max_speed/obs_vector_len)
  	    goto(obs_vector.x, obs_vector.y)
    }

}

function follow_avoid(direction) {    
    var light_vector = filtered_light().vector
    var obs_vector = obs_vec()
    var light_vector_len = math.vec2.length(light_vector)
    var obs_vector_len = math.vec2.length(obs_vec())
    var obs_ang = math.atan(obs_vector.y, obs_vector.x)

    
    if (obs_ang > -ang_range and obs_ang < ang_range and obs_vector_len < obstacle_threshold){
        
        if (filtered_light().number >= 0) {
            light_vector = math.vec2.scale(light_vector, direction*scaling_light_factor/light_vector_len)
            goto(light_vector.x, light_vector.y)
            prev_light_vector = light_vector
        }
        else {
            if (math.vec2.length(prev_light_vector) > 0.0){
            goto(prev_light_vector.x, prev_light_vector.y)
            }
            else 
            {
            goto(max_speed*0.1, 0.0)
            }
        }
    }

    else {
        collisions = collisions + 1
        obs_vector = math.vec2.scale(obs_vector, -1.0*max_speed/obs_vector_len)
  	    goto(obs_vector.x, obs_vector.y)
    }

}

function collect_samples(){
    if (not samples){
        samples = {.1 = avg_ground()}
    }
    else {
    samples[size(samples)+1] = avg_ground()
    }
    sample_average = sample_average + avg_ground()  
}

function add_value_to_set(set, key, value){
    if (not set[key]){
        set[id] = {}
    }
    set[key] = value
}

function size_of_array(array){
    if (not array){
        return 0
    }
    else {
        return size(array)
    }
}



function init() {

    neighbors.listen("zones", function(rid, data) {
        if (id < 100){
            if (data.zone == "white"){
                zone = "white"
            }
            if (data.zone == "black"){
                zone = "black"
            }
        }
    })

    white_followers.select(id % 3 == 0 and id < 100)
    black_followers.select(id % 3 == 1 and id < 100)
    nesters_exploration.select(id % 3 == 2 and id < 100)

    if (id%3 == 0 and id < 100){
        zone_assigned = "white"
    }

    if (id%3 == 1 and id < 100){
        zone_assigned = "black"
    }

    if (id%3 == 2 and id < 100){
        zone_assigned = "nest"
    }

    beacons.select(id >= 100)



}



function step() {

    debug.print("id: ", id, " conflicts: ",conflicts, " white: ",others_belief_white," black: ",others_belief_black)
    

    if (beacons.in()){
        if (id >= 100 and id < 105){
        neighbors.broadcast("zones", {.id=id, .zone = "white"})
        }
        if (id >= 105 and id < 110){
        neighbors.broadcast("zones", {.id=id, .zone = "black"})
        }
    }


    if(white_followers.in()){
        
        follow_avoid(white)
        if (zone == "white" and zone_assigned == "white") {
            white_exploration.join()
            white_followers.leave()
        }

        if (zone == "nest" and zone_assigned == "nest") {
            nesters_exploration.join()
            white_followers.leave()
        }
        
        }

    else if(black_followers.in()) {
        
        follow_avoid(black)
        if(zone == "black" and zone_assigned == "black") {
            black_exploration.join()
            black_followers.leave()
        }

        if(zone == "nest" and zone_assigned == "nest") {
            nesters_exploration.join()
            black_followers.leave()
        }
        }
        

    else if(black_exploration.in()) {
        if (zone == "black"){
            explore_avoid()
            collect_samples()
            if (size(samples) >= number_of_samples){
                zone_collected = black
                new_belief = sample_average/number_of_samples
                
                if (opinions.get("belief_black") != nil){
                    others_belief_black = others_belief_black + weight*(new_belief - others_belief_black) 
                }
                if (opinions.get("belief_white") != nil){
                    others_belief_white = opinions.get("belief_white") 
                }

                if (others_belief_black >= others_belief_white){
                    belief = black
                }
                else {
                    belief = white
                }

                #log("id: ",id," belief: ",others_belief_white," ",others_belief_black)
                samples = nil
                sample_average = 0.0

                opinions.put("belief_black",others_belief_black)
                
            }
        }
        
        else {
            zone = "nest"
            black_followers.join()
            black_exploration.leave()
        }
        }


    else if(white_exploration.in()) {
        if (zone == "white"){
            explore_avoid()
            collect_samples()
            if (size(samples) >= number_of_samples){
                zone_collected = white
                new_belief = sample_average/number_of_samples

                if (opinions.get("belief_white") != nil){
                    others_belief_white = others_belief_white + weight*(new_belief - others_belief_white) 
                }

                if (opinions.get("belief_black") != nil){
                    others_belief_black = opinions.get("belief_black") 
                }


                if (others_belief_white >= others_belief_black){
                    belief = white
                }
                else {
                    belief = black
                }

                #log("id: ",id," belief: ",others_belief_white," ",others_belief_black)
                samples = nil
                sample_average = 0.0

                opinions.put("belief_white",others_belief_white)


            }
        }

        else {
            zone = "nest"
            white_followers.join()
            white_exploration.leave()
        }
        }

    else if(nesters_exploration.in()) {
        
        if (opinions.get("belief_white") != nil){
        others_belief_white = opinions.get("belief_white")
        }
        if (opinions.get("belief_black") != nil){
        others_belief_black = opinions.get("belief_black")
        }
        #log("id: ",id," belief: ",others_belief.white," ",others_belief.black)
        
        if (others_belief_black > others_belief_white){
                    belief = black
        }
        else if (others_belief_black < others_belief_white){
                    belief = white
        }
        else {
                belief = nest
        }
        
        if(zone == "nest"){
            explore_avoid()
        }

        else if (zone == "white"){
            black_followers.join()
            nesters_exploration.leave()
        }

        else {
            white_followers.join()
            nesters_exploration.leave()
        }
        }
        

        
    

    
    display_led()
    zone = "nest" #clear zone for next step
    

}




function reset() {

}


function destroy() {

}
