include "includes/vec2.bzz"
include "includes/RVO.bzz"
include "includes/neighbors.bzz"
include "includes/table.bzz"


scaling_light_factor = 50
obstacle_threshold = 0.10
max_speed = 50
ang_range =  7.5 * math.pi / 180
white_threshold = 0.75
black_threshold = 0.25
time_threshold = 50
delta_time = 20

collisions = 0
BVMSTATE = "idle" 

zone = "nest"

white = 1 
black = -1

number_of_samples = 50
belief = 0.5 
new_belief = 0.5

sample_average = 0.0
neighbors_set = nil
white_neighbors_set = nil
black_neighbors_set = nil
samples = {}
prev_light_vector = {.x = 0, .y =0}
time_steps = 0
new_belief = 0.0
white_neighbors = 0
white_aggregate = 0.0
white_ratio = 0.0
black_neighbors = 0
black_aggregate = 0.0
black_ratio = 0.0
decision_flag = 0



white_followers = swarm.create(3)
black_followers = swarm.create(2)
nesters = swarm.create(5)
decision_makers = swarm.create(6)
white_exploration = swarm.create(1)
black_exploration = swarm.create(4)
beacons = swarm.create(7)




function sum_light(rid, data, accum) {
  lvec = math.vec2.newp(data.value, data.angle)
  accum.vector = math.vec2.add(lvec, accum.vector)
  if (data.value!=0) { #counting the number of light sensors that are good 
   accum.number = accum.number +1
  }
  return accum
}

# Filtering Light Function
function filtered_light() {
  var filtered_data = reduce(light, sum_light, {.number = 0 , .vector=math.vec2.new(0.0,0.0)})
  return filtered_data
}

# Obstacle avoidance function
function obs_vec()
{
  var accum = {}
  accum.x = 0.0
  accum.y = 0.0
  var i = 0
  while(i < size(proximity)) {
	accum.x = accum.x + proximity[i].value * math.cos(proximity[i].angle)
	accum.y = accum.y + proximity[i].value * math.sin(proximity[i].angle)
	i = i + 1
  }
  accum.x = accum.x / size(proximity)
  accum.y = accum.y / size(proximity)


  #debug.print("[",id,"]",math.vec2.length(light_vector)," .x ",light_vector.x," .y ",light_vector.y)
  return accum
}

# function to sum the ground sensor values
function sum_ground(rid, data, accum) {
   return accum + data.value
}

# function to calculate the average ground sensor value
function avg_ground() {
    var ground_avg = reduce(ground, sum_ground, 0.0)
    ground_avg = ground_avg / size(ground)
    return ground_avg
}

function display_led(){
    if (white_followers.in()){ 
        BVMSTATE = "white_followers"
        set_leds(255,255,255) 
    }
	if (black_followers.in()){ 
        BVMSTATE = "black_followers"
        set_leds(0,0,0) 
    }
    if (black_exploration.in()){ 
        BVMSTATE = "black_exploration"
        set_leds(255,0,0) }
    if (white_exploration.in()){ 
        BVMSTATE = "white_exploration"
        set_leds(0,255,0) 
        }
    if (nesters.in()){ 
        if (zone_collected == white){
        BVMSTATE = "nesters_white"}
        else if(zone_collected == black){
        BVMSTATE = "nesters_black"}
        set_leds(0,0,255) }
    if (decision_makers.in()){ 
        if (zone_collected == white){
        BVMSTATE = "decision_makers_white"    
        set_leds(0,int(255*new_belief),int(255*new_belief)) 
        }
        else if(zone_collected == black){
        BVMSTATE = "decision_makers_black"    
        set_leds(int(255*new_belief),int(255*new_belief),0)
        }
    }

    if (beacons.in()){
        if (id < 155) {
        set_leds(255,255,255)
        }
        else {
        set_leds(0,0,0)    
        } 
    }
}


function explore_avoid() {
    var obs_vector = obs_vec()
    var obs_vector_len = math.vec2.length(obs_vec())
    var obs_ang = math.atan(obs_vector.y, obs_vector.x)

    if (obs_ang > -ang_range and obs_ang < ang_range and obs_vector_len < obstacle_threshold){
        goto(max_speed, 0.0)
    }
    
    else{
        collisions = collisions + 1
        obs_vector = math.vec2.scale(obs_vector, -1.0*max_speed/obs_vector_len)
  	    goto(obs_vector.x, obs_vector.y)
    }

}

function follow_avoid(direction) {    
    var light_vector = filtered_light().vector
    var obs_vector = obs_vec()
    var light_vector_len = math.vec2.length(light_vector)
    var obs_vector_len = math.vec2.length(obs_vec())
    var obs_ang = math.atan(obs_vector.y, obs_vector.x)

    
    if (obs_ang > -ang_range and obs_ang < ang_range and obs_vector_len < obstacle_threshold){
        
        if (filtered_light().number > 2) {
            light_vector = math.vec2.scale(light_vector, direction*scaling_light_factor/light_vector_len)
            goto(light_vector.x, light_vector.y)
            prev_light_vector = light_vector
        }
        else {
            if (math.vec2.length(prev_light_vector) > 0.0){
            goto(prev_light_vector.x, prev_light_vector.y)
            }
            else 
            {
            goto(max_speed*0.1, 0.0)
            }
        }
    }

    else {
        collisions = collisions + 1
        obs_vector = math.vec2.scale(obs_vector, -1.0*max_speed/obs_vector_len)
  	    goto(obs_vector.x, obs_vector.y)
    }

}

function collect_samples(){
    if (not samples){
        samples = {.1 = avg_ground()}
    }
    else {
    samples[size(samples)+1] = avg_ground()
    }
    sample_average = sample_average + avg_ground()  
}

function add_value_to_set(set, key, value){
    if (not set[key]){
        set[id] = {}
    }
    set[key] = value
}

function size_of_array(array){
    if (not array){
        return 0
    }
    else {
        return size(array)
    }
}



function collect_neighbours(){
    neighbors.collect("opinions", id, new_belief, zone_collected)
}



function init() {

    neighbors.listen("zones", function(rid, data) {
        if (id < 150){
            if (data.zone == "white"){
                zone = "white"
            }
            if (data.zone == "black"){
                zone = "black"
            }
        }
    })


	white_followers.select(id % 2 == 0 and id < 150)
	black_followers.select((id+1) % 2 == 0  and id < 150)
    beacons.select(id >= 150)

    if (black_followers.in()){ 
        belief = black
    }
    if (white_followers.in()){ 
        belief = white
    }
    samples = nil 
    sample_average = 0.0

}



function step() {

    debug.print("id: ", id,  " state: ", BVMSTATE," timesteps: ",time_steps)
    

    if (beacons.in()){
        if (id >= 150 and id < 155){
        neighbors.broadcast("zones", {.id=id, .zone = "white"})
        }
        if (id >= 155 and id < 160){
        neighbors.broadcast("zones", {.id=id, .zone = "black"})
        }
    }


    else if(white_followers.in()){
        decision_flag = 0
        follow_avoid(white)
        if (zone == "white") {
            white_exploration.join()
            white_followers.leave()
        }


    }

    else if(black_followers.in()) {
        decision_flag = 0
        follow_avoid(black)
        if(zone == "black") {
            black_exploration.join()
            black_followers.leave()
        }

    }

    else if(black_exploration.in()) {


        if (zone == "black"){
            explore_avoid()
            collect_samples()
            if (size(samples) >= number_of_samples){
                zone_collected = black
                new_belief = sample_average/number_of_samples
                black_exploration.leave()
                nesters.join()
            }
        }
        
        else {
            zone = "nest"
            black_followers.join()
            black_exploration.leave()
        }
        
    
    }


    else if(white_exploration.in()) {
        
        if (zone == "white"){
            explore_avoid()
            collect_samples()
            if (size(samples) >= number_of_samples){
                zone_collected = white
                new_belief = sample_average/number_of_samples
                white_exploration.leave()
                nesters.join()
            }
        }

        else {
            zone = "nest"
            white_followers.join()
            white_exploration.leave()
        }
        
    
    }

    else if (nesters.in()){
        
        if (zone == "nest"){
            decision_makers.join()
            nesters.leave()
        }
        else {
            if (zone == "white"){
                follow_avoid(black)
            }
            else if(zone == "black"){
                follow_avoid(white)
            }
            
        }

    }

    else  if (decision_makers.in()){
        
        time_steps = time_steps + 1
        explore_avoid()
        if (zone == "white" or zone == "black"){
            decision_makers.leave()
            nesters.join()
        }

        neighbors.broadcast("opinions",{.id=id,.belief=new_belief,.zone_collected=zone_collected})

        if (time_steps > int(2*time_threshold*new_belief) - int(2*delta_time*new_belief) ){
            #debug.print("id: ", id, " broadcasting and collecting ")
            #neighbors.broadcast("opinions",{.id=id,.belief=new_belief,.zone_collected=zone_collected})
            collect_neighbours()
        }

        if (time_steps > int(2*time_threshold*new_belief)){
            
            decision_flag = 1
            #debug.print("id: ", id, " decision_making.... ")
            
            white_neighbors = neighbors.msgs["opinions"]["white"]
            white_aggregate = neighbors.msgs["opinions"]["aggregate_white"]
            if (neighbors.msgs["opinions"]["white"] > 0) {  
                white_ratio = neighbors.msgs["opinions"]["aggregate_white"]/neighbors.msgs["opinions"]["white"]
            }
            else {
                white_ratio = 0.0
            }

            black_neighbors = neighbors.msgs["opinions"]["black"]
            black_aggregate = neighbors.msgs["opinions"]["aggregate_black"]
            if (neighbors.msgs["opinions"]["black"] > 0) {
                black_ratio = neighbors.msgs["opinions"]["aggregate_black"]/neighbors.msgs["opinions"]["black"]
            }
            else {
                black_ratio = 0.0
            }

            if (white_ratio > black_ratio) {white_followers.join()}

            else if (white_ratio < black_ratio) {black_followers.join()}

            else{
                if (zone_collected == white){
                    white_followers.join()
                }
                else if (zone_collected == black){
                    black_followers.join()
                }
            }

            #log(id," white_neighbors ", white_neighbors, " black_neighbors ", black_neighbors, " white_aggregate ", white_aggregate, " black_aggregate ", black_aggregate, " white_ratio ", white_ratio, " black_ratio ", black_ratio, " zone_collected ", zone_collected, " new_belief ", new_belief)
            #log(id," white_neighbors_set ", neighbors.msgs["opinions"]["white"], " black_neighbors_set ", 
            #neighbors.msgs["opinions"]["black"], " aggregate ", neighbors.msgs["opinions"]["aggregate"], "zone_collected ",
            #zone_collected," new_belief ", new_belief)


            neighbors.ignore("opinions")
            neighbors.reset("opinions")
            

            samples = nil
            time_steps = 0
            sample_average = 0.0

            
            decision_makers.leave()

        
        }


    }

    zone = "nest" #clear zone for next step
    display_led()

}




function reset() {

}


function destroy() {

}
